[
{
	"uri": "https://aws-samples.github.io/aws-modernization-workshop-sample/",
	"title": "Modernization Workshop Documentation",
	"tags": [],
	"description": "",
	"content": " Modernization Workshop Documentation Welcome. Here you are going to learn to plan, build, and launch an AWS Modernization Workshop.\nPlease read this documentation in its entirety before starting to build a workshop, it will save you a lot of heartache and pain.\n To get started, either click on the \u0026gt; button to the right or click on Plan in the left-hand navigation.\n   Plan   Build   Launch    "
},
{
	"uri": "https://aws-samples.github.io/aws-modernization-workshop-sample/20_build/1_setup/",
	"title": "Setup Environment",
	"tags": [],
	"description": "",
	"content": " Building a workshop leverages several tools:\n Git Hugo Hugo learn theme CloudFormation templates  1. Clone Sample Repo You will need to have a little familiarity with git, if not you might want to lookup a git tutorial.\nStart by cloning the sample repo and push it to a repo on your own GitHub account. Change the name of myCompany-Workshop :)\ngit clone https://github.com/aws-samples/aws-modernization-workshop-sample myCompany-Workshop   We use clone instead of fork as you will break this from the sample repo and change the name. Once approved and published the repo will be called something to the effect aws-modernization-workshop-with-Company_Name\n 2. Download submodules The repo uses git submodules so cd into the newly cloned repo:\ngit submodule init git submodule update  3. Create and push to YOUR GitHub repo Create a repo in your GitHub account and follow the instructions under \u0026ldquo;Push an existing repository from the commandline\u0026rdquo;\n4. Install Hugo macOS: `brew install hugo` Windows: `choco install hugo -confirm`  To make the creation of web page documentation easier, we utilize a tool called Hugo. You will write your documentation/instructions using markdown language and Hugo will create static html content that can be served via S3. Hugo additionally applies a theme so that the site will have an AWS look and feel plus add additional features to beautify and make content stand out.\nFor more information about installing and using Hugo, visit https://gohugo.io/getting-started/installing/\nFor more information about the learn theme used in Hugo, visit https://learn.netlify.com/en/\n 5. Running Hugo From within the root of the repo\n$ hugo server  Using a browser go to http://localhost:1313 to view the site. Hugo is dynamic, so as you edit the content and the page in the browser will change. Allowing you to view in real-time what the content will look like.\n"
},
{
	"uri": "https://aws-samples.github.io/aws-modernization-workshop-sample/10_plan/1_story/",
	"title": "What&#39;s the story?",
	"tags": [],
	"description": "",
	"content": " Think about what you want to accomplish and how you want to educate users about your product. What is the use case or problem that your product solves for the end user and develop a story around it. Two things to have in the back of your mind while you think about this: 1. Customers don\u0026rsquo;t buy products they buy solutions to their problems and 2. Make learning fun, have a nice story that can entertain them while educating them at the same time. We have all sat through those boring click and paste workshops, don\u0026rsquo;t make yours one of them.\nBuild new or use an existing workshop? This decision will come down to the story you are trying to tell. If your product or solution is a simple integration to a bigger product or story then you might want to consider building onto an existing workshop. If you have a full story to tell or their is no existing workshop that fits your need then its best to create your own stand alone workshop.\nWorkshops are meant to evolve, so a good story will be extended by other partners, SA\u0026rsquo;s, and the public. The workshop is open source and that how it will grow.\n Examples of some existing workshops  https://snyk.modernize.awsworkshop.io/ https://contrastsecurity.modernize.awsworkshop.io/ https://atlassian.awsworkshop.io/  "
},
{
	"uri": "https://aws-samples.github.io/aws-modernization-workshop-sample/20_build/10_editing/",
	"title": "Edit and Build",
	"tags": [],
	"description": "",
	"content": " Directory Tree Directory of artifacts you will add, change, delete during the course of building a workshop.\n/ |-content |---10_first_section |---20_second_section |---30_third_section |-modules |-samples |---cloudformation |---codebuild |-static |---images |config.toml  Editing Hugo uses markdown to generate static html pages. This makes it easier to create a web based workshop as all you need to do is create documents using markdown and Hugo will create the pretty html for you. For additional information on markdown, visit the learn theme documentation page https://learn.netlify.com/en/cont/markdown/\nconfig.toml file Start by editing the config.toml file. Only the Title needs to be edited at this time.\nbaseURL = \u0026quot;/\u0026quot; languageCode = \u0026quot;en-US\u0026quot; defaultContentLanguage = \u0026quot;en\u0026quot; title = \u0026quot;AWS Modernization Workshop Sample\u0026quot; theme = \u0026quot;hugo-theme-learn\u0026quot; metaDataFormat = \u0026quot;yaml\u0026quot; defaultContentLanguageInSubdir= true  Start Hugo Server hugo server   Navigate to localhost:1313 in your browser to see the sample site\n Content editing Now lets start editing content. Hugo uses the content stored in content to build web pages. If you look under the directory there is a file _index.md. This is the starting point of the documentation and is the equivalent of index.html. Each folder becomes the high level navigation. Each of the folders and files are prefixed with a number, which is there for visual ordering only and does not have an effect on the actual html or workshop order. You will want to look at each and every file in the content directory tree and edit.\nStart with /content/_index.md Each of the files has what Hugo calls front matter. This is basically metadata that Hugo uses when generating the files. Here is an example, note the Title and weight fields. Weight controls the ordering, lower number the higher the order.\n--- title: \u0026quot;Main Page\u0026quot; chapter: true weight: 1 ---  Edit The title and the text below the 3 dashes, now Save If everything went well the browser should refresh with the changes you have just make.\nEdit folder names and files The folder names are stubs and should be edited to make clear what type of content is stored in them. The file _index.md within each folder sets the order using the weight front matter, and the name that appears in the left navigation pane. Once again names are prefixed with a number only to visually sort, the weight is what really determines the ordering.\nWhen creating additional sections or pages, just copy the files from another section, rename and edit.\n CloudFormation and CodeBuild samples In the workshop sample there is a sample directory with examples of CloudFormation Templates and CodeBuild buildspec.yml files. Feel free to leverage these samples in your solution. Note this is a workshop so samples are not meant to be best practice, but more for educational purposes only. So if your workshop uses an RDS instance there is no reason to setup replication, backups, and everything else that goes along with making a robust solution, this is of course unless your workshop is on building robust fault tolerant solutions :)\nScripts, Artifacts, custom CloudFormation templates If your workshop includes custom scripts, artifacts, etc\u0026hellip; you should save them to the content folder where they will be needed. As an example, if I have a getting_started.sh that is used in the First Section, I would place that script in content/10_first_section\nSpecial markdown samples See content/10_first_section/1_page.md for examples of short codes and special template code to help your workshop pop.\nAdditional editing tips  Use Cloud9 for the IDE and workshop host for all participants. Having users setup their local workstations doesn\u0026rsquo;t work very well and often contributes to a poor user experience. Review the flow of other workshops. To create a new page, copy another document and rename it. The name is only important to the builders, but the actual name that shows in the navigation is the title at the top of the document.\n If you want to create a new page between 10 and 20 you can use any number in the name as long as it\u0026rsquo;s sequentially between 10 and 20. Don\u0026rsquo;t forget to appropriately set the weight in the top section. Place all images in {repo_root}/static/images. There are several examples of using images in the sample content. Provide users with sample output in \u0026lt;pre\u0026gt; \u0026lt;/pre\u0026gt; tags so that the copy to clipboard function is not there. No reason to copy example output to the clipboard. DO NOT assume that the user has any exposure to AWS or your product. Everything needs to be explained and all command or areas in the UI you want the user to go to needs to be provided. Screen shots or examples work well for this, especially on busy UI\u0026rsquo;s.\n Use an architecture diagram in your workshop. Show people what are going to deploy. Visuals work wonders when educating people about abstract concepts.\n  "
},
{
	"uri": "https://aws-samples.github.io/aws-modernization-workshop-sample/10_plan/",
	"title": "Plan",
	"tags": [],
	"description": "",
	"content": " Plan What exactly is a workshop? A workshop is an educational tool used to inform users and end customers on how to use AWS \u0026 partner products and services. What better way to learn than to let customers get hands on with building or instrumenting products or services in an actual AWS environment. A workshop format is used because it scales well, meaning you can deliver the content and message whenever and wherever the customer happens to be, whether the customer is at work, home, or at an AWS event they can get hands on and learn about building products and solutions. "
},
{
	"uri": "https://aws-samples.github.io/aws-modernization-workshop-sample/10_plan/2_plan/",
	"title": "Plan the Workshop",
	"tags": [],
	"description": "",
	"content": " High Level Workshop Planning  Determine the message and what you want the customer to learn. Remember to wrap your story around this so customers find it fun. Example: I want potential customers to learn how easy it is to instrument our testing product into their build pipeline.\n Think from a high level what components or systems will be needed. These are the building blocks that will save you time when you start to build the workshop. Don\u0026rsquo;t reinvent the wheel. link to content for account creation and other artifacts you will need. This also goes for applications such as Unicorn store, Java Pet Shops, Wild Rydes, etc\u0026hellip; Determine the workflow or stages. You are telling a story so you should have an introduction to give people conext, tell them what you plan to accomplish in the workshop, body of the workshop, and conclusion. Don\u0026rsquo;t forget cleanup as well since customers will more than likely be deploying resources and you want to make sure they are not charged more what is necessary to learn about your solution. Change/Add/Remove content to create the workshop. Have a way to capture leads. We don\u0026rsquo;t provide customer contact information on who launches the workshop. Test the workshop. Have several people go through the workshop to make sure all instructions, artifacts, etcetera are included and working.\n Work with your PSA contact to publish the workshop.\n Plan Go To Market events.  "
},
{
	"uri": "https://aws-samples.github.io/aws-modernization-workshop-sample/20_build/",
	"title": "Build",
	"tags": [],
	"description": "",
	"content": " Build Time to start building? In this section we are going to start building our workshop. High level steps  Setup the environment Edit and build Test Publish  "
},
{
	"uri": "https://aws-samples.github.io/aws-modernization-workshop-sample/20_build/20_testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": " Testing Once you feel your workshop is complete, have a few other people test it. At this point you will probably need technical people to test it as the flow may be a little rough. hugo with no options will generate an html site in /public. But it\u0026rsquo;s also fairly easy to run hugo server and connect to localhost:1313 to view the workshop.\nOnce you have ironed out flow issues, have a few non-technical check the site for grammatical errors. If you are using an IDE, which I hope you are, install or setup spell check to catch some mistakes early.\nSome things to check for  Check for flow and make sure that someone following the instructions can complete the workshop Make sure there are no errors when going through the different steps Check all links in the workshop and the navigation Check the search functionality Ensure you cleaned up all resources  "
},
{
	"uri": "https://aws-samples.github.io/aws-modernization-workshop-sample/30_launch/",
	"title": "Launch",
	"tags": [],
	"description": "",
	"content": " Launch With your workshop published, now its time to setup some go to market activities.\n Notify your PDR or PDM that you have a workshop launched Post a link on your main page Share on social media your workshop Schedule events to deliver your workshop Work with AWS Partner Marketing for some additional GTM activities  "
},
{
	"uri": "https://aws-samples.github.io/aws-modernization-workshop-sample/20_build/30_publish/",
	"title": "Publish",
	"tags": [],
	"description": "",
	"content": " Publish Now that your workshop is ready, reach out to your PSA or SA and have them follow the process for getting your workshop published.\nHigh level steps  The SA will review your submission and makes sure everything works.\n The SA will request a repo under aws-samples with the naming standard aws-modernization-workshop-with-{companyname} Once the repo is created, you will fork this repo, copy the content of your workshop to this repo, then issue a pull request. The pull request will be reviewed and merged to master. A CloudFront distribution and deployment pipeline will be setup to deploy the site to an AWS account. Site is now published.  Because the site has a ci/cd pipeline any future changes only requires a pull request and once approved will automatically publish the changes.\n "
},
{
	"uri": "https://aws-samples.github.io/aws-modernization-workshop-sample/40_faqs/",
	"title": "FAQs",
	"tags": [],
	"description": "",
	"content": " FAQ\u0026rsquo;s Why do you use Cloud9?  A. When conducting workshops it is often difficult to determine the state of the users workstation and validate that all dependencies and requirements are installed. With Cloud9 we get a capable IDE and shell access to the AWS account. Git, aws-cli, programming languages, and many other tools are pre-installed which allows us to start everyone from a known state and not have to fumble around with missing components from someones workstation.\nCan I change the License  A. We rather you not. The site will be posted at aws-samples and the license included in the sample is MIT, which is meant to be simple and open source friendly.\nWhat if I want to use other tools, such as Jenkins or Terraform as examples?  A. Great. We actually encourage you to use other tools and services as you may expect customers to use this in their environment. Note that if you choose to use additional or alternative tools that it\u0026rsquo;s easy for the end user to follow and does not detract from your main message. As an example, if your main message is application security scanning, does it make a difference whether you use Jenkins or CodeBuild, or does the usage of one or the other add unnecessary complexity that has nothing to do with your message? So don\u0026rsquo;t reinvent the wheel and if there is already an example of instrumenting testing in CodeBuild, I would use that as the tool has nothing to do with your message. But if your main message is instrumenting security scanning on Jenkins, then yes, use Jenkins.\n"
},
{
	"uri": "https://aws-samples.github.io/aws-modernization-workshop-sample/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://aws-samples.github.io/aws-modernization-workshop-sample/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]